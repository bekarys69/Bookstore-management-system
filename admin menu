public static void admin_menu() {
     
    JFrame f=new JFrame("Admin Functions"); //присваивание диалогового окна функциям администратора
    JButton create_but=new JButton("Create/Reset"); //создание экземпляра JButton
    create_but.setBounds(450,60,120,25); //ось x, ось y, ширина, высота
    create_but.addActionListener(new ActionListener() { 
        public void actionPerformed(ActionEvent e){
             
            create(); //вызов функции create
            JOptionPane.showMessageDialog(null,"Database Created/Reset!"); //открытие окна и отображение сообщения
             
        }
    });
     
     
    JButton view_but=new JButton("View Books"); //создание экземпляра кнопки для просмотра книг
    view_but.setBounds(20,20,120,25); //ось x, ось y, ширина, высота
    view_but.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e){
                       JFrame f = new JFrame("Books Available"); 
           
              
            Connection connection = connect(); //подключение к БД
            String sql="select * from BOOKS"; //выбирает все книги
            try {
                Statement stmt = connection.createStatement();
                 stmt.executeUpdate("use library"); //использование БД
                stmt=connection.createStatement();
                ResultSet rs=stmt.executeQuery(sql);
                JTable book_list= new JTable(); //просмотр данных в табличном формате
                book_list.setModel(DbUtils.resultSetToTableModel(rs));
                JScrollPane scrollPane = new JScrollPane(book_list); //упомянуть полосу прокрутки
 
                f.add(scrollPane); //добавить полосу прокрутки
                f.setSize(800, 400); //установить размер рамки
                f.setVisible(true);
                f.setLocationRelativeTo(null);
            } catch (SQLException e1) {
                 JOptionPane.showMessageDialog(null, e1);
            }               
             
    }
    }
    );
    
    JButton users_but=new JButton("View Users"); //создание экземпляра JButton для просмотра
    users_but.setBounds(150,20,120,25); //ось x, ось y, ширина, высота
    users_but.addActionListener(new ActionListener() { 
        public void actionPerformed(ActionEvent e){
                 
                JFrame f = new JFrame("Users List");                 
                Connection connection = connect();
                String sql="select * from users"; //извлечение всех пользователей
                try {
                    Statement stmt = connection.createStatement();
                     stmt.executeUpdate("use libraryY"); //использование БД
                    stmt=connection.createStatement();
                    ResultSet rs=stmt.executeQuery(sql);
                    JTable book_list= new JTable();
                    book_list.setModel(DbUtils.resultSetToTableModel(rs)); 
                    JScrollPane scrollPane = new JScrollPane(book_list); //упомянуть полосу прокрутки
 
                    f.add(scrollPane); //добавить полосу прокрутки
                    f.setSize(800, 400); //установить размер рамки
                    f.setVisible(true);
                    f.setLocationRelativeTo(null);
                } catch (SQLException e1) {
                     JOptionPane.showMessageDialog(null, e1);
                }       
                 
                 
    }
        }
    );  

 JButton issued_but=new JButton("View Issued Books"); //создание экземпляра JButton для просмотра
    issued_but.setBounds(280,20,160,25); //ось x, ось y, ширина, высота
    issued_but.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e){
                 
                JFrame f = new JFrame("Users List");                  
                Connection connection = connect();
                String sql="select * from issued";
                try {
                    Statement stmt = connection.createStatement();
                     stmt.executeUpdate("use library");
                    stmt=connection.createStatement();
                    ResultSet rs=stmt.executeQuery(sql);
                    JTable book_list= new JTable();
                    book_list.setModel(DbUtils.resultSetToTableModel(rs)); 
                     
                    JScrollPane scrollPane = new JScrollPane(book_list);
 
                    f.add(scrollPane);
                    f.setSize(800, 400);
                    f.setVisible(true);
                    f.setLocationRelativeTo(null);
                } catch (SQLException e1) {
                     JOptionPane.showMessageDialog(null, e1);
                }       
                             
    }
        }
    );
    
    JButton add_user=new JButton("Add User"); //создание экземпляра JButton для добавления пользователей
    add_user.setBounds(20,60,120,25); //установить размеры для кнопки
     
    add_user.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e){
                 
                JFrame g = new JFrame("Enter User Details"); //рамка для ввода сведений о пользователе
                JLabel l1,l2; //создание метки
                l1=new JLabel("Username"); //метка 1 для имени пользователя
                l1.setBounds(30,15, 100,30); 
                 
                 
                l2=new JLabel("Password"); //метка 2 для пароля
                l2.setBounds(30,50, 100,30);
                 
                JTextField F_user = new JTextField(); //установка поля для имени пользователя
                F_user.setBounds(110, 15, 200, 30); 
                 
                JPasswordField F_pass=new JPasswordField(); //установка поля для пароля
                F_pass.setBounds(110, 50, 200, 30); 
                JRadioButton a1 = new JRadioButton("Admin"); //установка переключателя для админа
                a1.setBounds(55, 80, 200,30); 
                JRadioButton a2 = new JRadioButton("User"); //установка переключателя для пользователя
                a2.setBounds(130, 80, 200,30); //добавить переключатели
                ButtonGroup bg=new ButtonGroup();  
                bg.add(a1);bg.add(a2);  
                 
                                 
                JButton create_but=new JButton("Create"); //создание экземпляра JButton для Create
                create_but.setBounds(130,130,80,25); //ось x, ось y, ширина, высота
                create_but.addActionListener(new ActionListener() {
                     
                    public void actionPerformed(ActionEvent e){
                     
                    String username = F_user.getText();
                    String password = F_pass.getText();
                    Boolean admin = false;
                     
                    if(a1.isSelected()) {
                        admin=true;
                    }
                     
                    Connection connection = connect();
                     
                    try {
                    Statement stmt = connection.createStatement();
                     stmt.executeUpdate("use library");
                     stmt.executeUpdate("insert into users(username,password,admin) values ('"+username+"','"+password+"',"+admin+")");
                     JOptionPane.showMessageDialog(null,"User added!");
                     g.dispose();
                      
                    }
                     
                    catch (SQLException e1) {
                         JOptionPane.showMessageDialog(null, e1);
                    }   
                     
                    }
                     
                });
     
      g.add(create_but);
                    g.add(a2);
                    g.add(a1);
                    g.add(l1);
                    g.add(l2);
                    g.add(F_user);
                    g.add(F_pass);
                    g.setSize(350,200); //350 ширина и 200 высота
                    g.setLayout(null); //использование no layout
                    g.setVisible(true); //делает рамку видимой
                    g.setLocationRelativeTo(null);
                 
                 
    }
    });

JButton add_book=new JButton("Add Book"); //создание экземпляра JButton для добавления книг
    add_book.setBounds(150,60,120,25); 
     
    add_book.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e){
                JFrame g = new JFrame("Enter Book Details");
                JLabel l1,l2,l3; //установка метки
                l1=new JLabel("Book Name"); //метка 1 для названия книги
                l1.setBounds(30,15, 100,30); 
                 
                 
                l2=new JLabel("Genre"); //метка 2 для жанра
                l2.setBounds(30,53, 100,30); 
                 
                l3=new JLabel("Price"); //метка 3 для цены
                l3.setBounds(30,90, 100,30); 
                 
                JTextField F_bname = new JTextField(); //задать поле для названия книги
                F_bname.setBounds(110, 15, 200, 30);
                 
                JTextField F_genre=new JTextField(); //задать поле для жанра
                F_genre.setBounds(110, 53, 200, 30);
                JTextField F_price=new JTextField(); //задать поле для цены
                F_price.setBounds(110, 90, 200, 30);
                         
                 
                JButton create_but=new JButton("Submit"); //создание экземпляра JButton для отправки сведений
                create_but.setBounds(130,130,80,25); //ось x, ось y, ширина, высота
                create_but.addActionListener(new ActionListener() { //назначить название книги, жанр, цену
                     
                    public void actionPerformed(ActionEvent e){ 
                    String bname = F_bname.getText();
                    String genre = F_genre.getText();
                    String price = F_price.getText();
                    int price_int = Integer.parseInt(price); //преобразовать цену целого числа в int
                     
                    Connection connection = connect();
                     
                    try {
                    Statement stmt = connection.createStatement();
                     stmt.executeUpdate("use library");
                     stmt.executeUpdate("insert into books(bname,genre,price) values ('"+bname+"','"+genre+"',"+price_int+")");
                     JOptionPane.showMessageDialog(null,"Book added!");
                     g.dispose();
                      
                    }
                     
                    catch (SQLException e1) {
                         JOptionPane.showMessageDialog(null, e1);
                    }   
                     
                    }
                     
                });
                                 
                    g.add(l3);
                    g.add(create_but);
                    g.add(l1);
                    g.add(l2);
                    g.add(F_bname);
                    g.add(F_genre);
                    g.add(F_price);
                    g.setSize(350,200); //350 ширина и 200 высота
                    g.setLayout(null); //использование no layout
                    g.setVisible(true); //делает рамку видимой
                    g.setLocationRelativeTo(null);
                             
    }
    });
     
    JButton issue_book=new JButton("Issue Book"); //создание экземпляра JButton для выдачи книг
    issue_book.setBounds(450,20,120,25); 
     
    issue_book.addActionListener(new ActionListener() { //ввод данных
        public void actionPerformed(ActionEvent e){ 
                JFrame g = new JFrame("Enter Details");
                JLabel l1,l2,l3,l4; //создание меток
                l1=new JLabel("Book ID(BID)"); // метка 1 для ID книги
                l1.setBounds(30,15, 100,30); 
                 
                 
                l2=new JLabel("User ID(UID)"); //метка 2 для ID пользователя
                l2.setBounds(30,53, 100,30); 
                 
                l3=new JLabel("Period(days)"); //метка 3 для периода
                l3.setBounds(30,90, 100,30); 
                 
                l4=new JLabel("Issued Date(DD-MM-YYYY)"); //метка 4 для даты выпуска
                l4.setBounds(30,127, 150,30); 
                 
                JTextField F_bid = new JTextField();
                F_bid.setBounds(110, 15, 200, 30);
                 
                 
                JTextField F_uid=new JTextField();
                F_uid.setBounds(110, 53, 200, 30);
                 
                JTextField F_period=new JTextField();
                F_period.setBounds(110, 90, 200, 30);
                 
                JTextField F_issue=new JTextField();
                F_issue.setBounds(180, 130, 130, 30);   
 
                 
                JButton create_but=new JButton("Submit"); //создание экземпляра JButton
                create_but.setBounds(130,170,80,25); //ось x, ось y, ширина, высота
                create_but.addActionListener(new ActionListener() {
                     
                    public void actionPerformed(ActionEvent e){
                     
                    String uid = F_uid.getText();
                    String bid = F_bid.getText();
                    String period = F_period.getText();
                    String issued_date = F_issue.getText();
 
                    int period_int = Integer.parseInt(period);
                     
                    Connection connection = connect();
                     
                    try {
                    Statement stmt = connection.createStatement();
                     stmt.executeUpdate("use library");
                     stmt.executeUpdate("insert into issued(uid,bid,issued_date,period) values ('"+uid+"','"+bid+"','"+issued_date+"',"+period_int+")");
                     JOptionPane.showMessageDialog(null,"Book Issued!");
                     g.dispose();
                      
                    }
                     
                    catch (SQLException e1) {
                         JOptionPane.showMessageDialog(null, e1);
                    }   
                     
                    }
                     
                });
                     
                 
                    g.add(l3);
                    g.add(l4);
                    g.add(create_but);
                    g.add(l1);
                    g.add(l2);
                    g.add(F_uid);
                    g.add(F_bid);
                    g.add(F_period);
                    g.add(F_issue);
                    g.setSize(350,250); //350 ширина и 250 высота
                    g.setLayout(null); //использование no layout
                    g.setVisible(true); //делает рамку видимой
                    g.setLocationRelativeTo(null);
                 
                 
    }
    });
     
    JButton return_book=new JButton("Return Book"); //создание экземпляра JButton для возврата книг
    return_book.setBounds(280,60,160,25); 
     
    return_book.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e){
                 
                JFrame g = new JFrame("Enter Details");
                JLabel l1,l2,l3,l4; //установка меток
                l1=new JLabel("Issue ID(IID)"); //метка 1 для ID выпуска
                l1.setBounds(30,15, 100,30); 
                
                 
                l4=new JLabel("Return Date(DD-MM-YYYY)");  
                l4.setBounds(30,50, 150,30); 
                 
                JTextField F_iid = new JTextField();
                F_iid.setBounds(110, 15, 200, 30);
                 
                 
                JTextField F_return=new JTextField();
                F_return.setBounds(180, 50, 130, 30);
             
 
                JButton create_but=new JButton("Return"); //создание экземпляра JButton для указания даты возврата и вычисления штрафа
                create_but.setBounds(130,170,80,25); //ось x, ось y, ширина, высота
                create_but.addActionListener(new ActionListener() {
                     
                    public void actionPerformed(ActionEvent e){                 
                     
                    String iid = F_iid.getText();
                    String return_date = F_return.getText();
                     
                    Connection connection = connect();
                     
                    try {
                    Statement stmt = connection.createStatement();
                     stmt.executeUpdate("use library");
                     String date1=null; //инициализировать дату 1 нулевым значением
                     String date2=return_date; //инициализировать данные 2 с датой возврата
                     
                     ResultSet rs = stmt.executeQuery("select issued_date from issued where iid="+iid);
                     while (rs.next()) {
                         date1 = rs.getString(1);
                          
                       }
                      
                     try {
                            Date date_1=new SimpleDateFormat("dd-MM-yyyy").parse(date1);
                            Date date_2=new SimpleDateFormat("dd-MM-yyyy").parse(date2);
                            long diff = date_2.getTime() - date_1.getTime(); //вычтите даты и сохраните разницу
                            ex.days=(int)(TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS)); //преобразовать разницу из миллисекунд в дни
                             
                             
                        } catch (ParseException e1) {
                            e1.printStackTrace();
                        }
                      
                     
                     stmt.executeUpdate("update issued set return_date='"+return_date+"' where iid="+iid); //обновить дату возврата
                     g.dispose();
                     
                     
                     Connection connection1 = connect();
                     Statement stmt1 = connection1.createStatement();
                     stmt1.executeUpdate("use library");                
                    ResultSet rs1 = stmt1.executeQuery("select period from issued where iid="+iid); //установленный период
                    String diff=null; 
                    while (rs1.next()) {
                         diff = rs1.getString(1);
                          
                       }
                    int diff_int = Integer.parseInt(diff);
                    if(ex.days&amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;gt;diff_int) { //если количество дней больше, чем период, то рассчитывается штраф
                         
                        int fine = (ex.days-diff_int)*100; //штраф за каждый день после истечения срока составляет 100 тенге
                        stmt1.executeUpdate("update issued set fine="+fine+" where iid="+iid); //обновление штрафов в системе
                        String fine_str = ("Fine: Tg. "+fine);
                        JOptionPane.showMessageDialog(null,fine_str);
                         
                    }
 
                     JOptionPane.showMessageDialog(null,"Book Returned!");
                      
                    }
                             
                     
                    catch (SQLException e1) {
                         JOptionPane.showMessageDialog(null, e1);
                    }   
                     
                    }
                     
                }); 
                    g.add(l4);
                    g.add(create_but);
                    g.add(l1);
                    g.add(F_iid);
                    g.add(F_return);
                    g.setSize(350,250); //350 ширина и 250 высота
                    g.setLayout(null); //использование no layout
                    g.setVisible(true); //делает рамку видимой
                    g.setLocationRelativeTo(null);              
    }
    });
     
    f.add(create_but);
    f.add(return_book);
    f.add(issue_book);
    f.add(add_book);
    f.add(issued_but);
    f.add(users_but);
    f.add(view_but);
    f.add(add_user);
    f.setSize(600,200); //600 ширина и 200 высота
    f.setLayout(null); //использование no layout
    f.setVisible(true); //делает рамку видимой
    f.setLocationRelativeTo(null);
     
    }
}
